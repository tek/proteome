name: proteome
version: 0.3.17.0
synopsis: neovim project manager
description: Please see the README on GitHub at <https://github.com/tek/proteome>
github: "tek/proteome"
license: MIT
license-file: LICENSE
author: "Torsten Schmits"
maintainer: "tek@tryp.io"
copyright: "2018 Torsten Schmits"
category: Neovim
build-type: Simple

extra-source-files:
- README.md

library:
  source-dirs: lib

executables:
  proteome:
    main: Main.hs
    source-dirs: app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - proteome

tests:
  proteome-unit:
    main: SpecMain.hs
    source-dirs: test/u
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - proteome
    - ribosome-test
    - HTF

dependencies:
  - Glob
  - aeson
  - ansi-terminal
  - attoparsec
  - name: base
    version: '>= 4 && < 5'
    mixin:
      hiding (Prelude)
  - bytestring
  - chiasma
  - composition
  - composition-extra
  - conduit
  - conduit-extra
  - containers
  - cornea
  - data-default-class
  - deepseq
  - directory
  - either
  - exceptions
  - extra
  - filepath
  - filepattern
  - hslogger
  - lens
  - lifted-async
  - lifted-base
  - messagepack
  - mono-traversable
  - mtl
  - neat-interpolation
  - nvim-hs
  - parsers
  - path
  - path-io
  - pretty-terminal
  - prettyprinter
  - raw-strings-qq
  - regex-with-pcre
  - relude
  - resourcet
  - ribosome
  - split
  - stm
  - stm-conduit
  - template-haskell
  - text
  - time
  - transformers
  - typed-process
  - utf8-string
  - ribosome-test
  - HTF

default-extensions:
  - AllowAmbiguousTypes
  - ApplicativeDo
  - BangPatterns
  - BinaryLiterals
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingStrategies
  - DisambiguateRecordFields
  - DoAndIfThenElse
  - DuplicateRecordFields
  - EmptyDataDecls
  - ExistentialQuantification
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - LiberalTypeSynonyms
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - OverloadedStrings
  - PackageImports
  - PartialTypeSignatures
  - PatternGuards
  - PatternSynonyms
  - PolyKinds
  - QuantifiedConstraints
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeFamilyDependencies
  - TypeOperators
  - TypeSynonymInstances
  - UndecidableInstances
  - UnicodeSyntax
  - ViewPatterns
